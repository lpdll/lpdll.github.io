<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>form表单提交后重置表单失效解决</title>
      <link href="2021/04/26/web/reset_form_after_submit/"/>
      <url>2021/04/26/web/reset_form_after_submit/</url>
      
        <content type="html"><![CDATA[<h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>页面内提供了数据查询功能，查询字段为姓名和手机号，提交查询请求之后，重置按钮失效；但是在查询之前执行重置的话是可行的。</p><h3 id="问题原因"><a href="#问题原因" class="headerlink" title="问题原因"></a>问题原因</h3><p>type=”reset”的input标签，点击后只是重置到默认值，这就很好解释了为什么不点击查询按钮可以重置表单数据为空，<br>而在点击了查询(submit类型)按钮之后，表单各数据内容就等于有值了，所以点击重置不能达到预期重置表单数据为空的目的。</p><h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;form&quot;</span>).on(<span class="string">&quot;click&quot;</span>, <span class="string">&quot;button[type=&#x27;reset&#x27;]&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//清空所有type为text的值</span></span><br><span class="line">    <span class="keyword">var</span> $inputs = $(<span class="string">&quot;form&quot;</span>).find(<span class="string">&quot;input[type=&#x27;text&#x27;]&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; $inputs.length;i++)&#123;</span><br><span class="line">        $($inputs[i]).val(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//清空select框的值</span></span><br><span class="line">    $(<span class="string">&quot;#channelHtml&quot;</span>).val(<span class="string">&quot;&quot;</span>).trigger(<span class="string">&#x27;change&#x27;</span>);<span class="comment">//下拉框重置</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端相关 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>PHP7新特性简介</title>
      <link href="2021/04/25/php/study/php7_new_features/"/>
      <url>2021/04/25/php/study/php7_new_features/</url>
      
        <content type="html"><![CDATA[<p>PHP7除了在性能方面有极大提升外，还添加了很多新的特性</p><h3 id="太空船操作符"><a href="#太空船操作符" class="headerlink" title="太空船操作符"></a>太空船操作符</h3><p>太空船操作符用于比较两个表达式</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//整数</span></span><br><span class="line"><span class="keyword">echo</span> <span class="number">1</span> &lt;=&gt; <span class="number">1</span>; <span class="comment">//相等时返回0</span></span><br><span class="line"><span class="keyword">echo</span> <span class="number">1</span> &lt;=&gt; <span class="number">2</span>; <span class="comment">//小于时返回-1</span></span><br><span class="line"><span class="keyword">echo</span> <span class="number">2</span> &lt;=&gt; <span class="number">1</span>; <span class="comment">//大于时返回1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//浮点数</span></span><br><span class="line"><span class="keyword">echo</span> <span class="number">1.5</span> &lt;=&gt; <span class="number">1.5</span>; <span class="comment">//相等时返回0</span></span><br><span class="line"><span class="keyword">echo</span> <span class="number">1.5</span> &lt;=&gt; <span class="number">2.5</span>; <span class="comment">//小于时返回-1</span></span><br><span class="line"><span class="keyword">echo</span> <span class="number">2.5</span> &lt;=&gt; <span class="number">1.5</span>; <span class="comment">//大于时返回1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//字符串</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;a&#x27;</span> &lt;=&gt; <span class="string">&#x27;a&#x27;</span>; <span class="comment">//相等时返回0</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;a&#x27;</span> &lt;=&gt; <span class="string">&#x27;b&#x27;</span>; <span class="comment">//小于时返回-1</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;b&#x27;</span> &lt;=&gt; <span class="string">&#x27;a&#x27;</span>; <span class="comment">//大于时返回1</span></span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="标量类型声明和返回值得类型声明"><a href="#标量类型声明和返回值得类型声明" class="headerlink" title="标量类型声明和返回值得类型声明"></a>标量类型声明和返回值得类型声明<br/></h3><h4 id="PHP7可以对参数做声明"><a href="#PHP7可以对参数做声明" class="headerlink" title="PHP7可以对参数做声明"></a>PHP7可以对参数做声明</h4><ul><li>字符串（string）</li><li>整型（int）</li><li>浮点型（float）</li><li>布尔型（bool）</li><li>参数类型前面加上”？”，表示入参或出参值要么是null，要么是声明的类型</li><li>函数的返回类型可以定义void，无论是否声明严格模式，只要函数中有”return;”以外其他的return都会报错<br/> </li><li><font color='red'>注意：入参的参数的类型不能是void</font><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span> (strict_types = <span class="number">1</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">?<span class="keyword">int</span> <span class="variable">$a</span></span>) : ?<span class="title">int</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$a</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var_dump(test(<span class="literal">null</span>)); <span class="comment">//NULL</span></span><br><span class="line">var_dump(test(<span class="number">1</span>)); <span class="comment">//1</span></span><br><span class="line">var_dump(test(<span class="string">&#x27;a&#x27;</span>)); <span class="comment">//ERROR</span></span><br></pre></td></tr></table></figure><h4 id="PHP7类型声明模式"><a href="#PHP7类型声明模式" class="headerlink" title="PHP7类型声明模式"></a>PHP7类型声明模式</h4></li><li>严格模式：严格模式下，传入的类型和声明的类型不一致会报错</li><li>默认模式：默认模式下，传入的类型和声明的类型不一致会尝试进行类型转换</li><li>模式开启方式<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span>(strict_types = <span class="number">1</span>);</span><br></pre></td></tr></table></figure><h3 id="null合并操作符"><a href="#null合并操作符" class="headerlink" title="null合并操作符"></a>null合并操作符</h3>PHP7新的语法糖 “??” ,如果变量存在且值不为null，它返回自身的值，否则返回它的第二个操作数<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$page</span> = <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;page&#x27;</span>]) ? <span class="variable">$_GET</span>[<span class="string">&#x27;page&#x27;</span>] ? <span class="number">0</span>; <span class="comment">//PHP7之前的写法</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$page</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;page&#x27;</span>] ?? <span class="number">0</span>; <span class="comment">//PHP7的写法</span></span><br><span class="line"><span class="variable">$page</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;page&#x27;</span>] ?? <span class="variable">$_POST</span>[<span class="string">&#x27;page&#x27;</span>] ?? <span class="number">0</span>;<span class="comment">//也可以这样写</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="常量数组"><a href="#常量数组" class="headerlink" title="常量数组"></a>常量数组</h3><p>PHP7之前无法通过define来定义数组常量,PHP7支持</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">define(<span class="string">&#x27;ANIMALS&#x27;</span>,[</span><br><span class="line">    <span class="string">&#x27;dog&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;cat&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;bird&#x27;</span></span><br><span class="line">]);</span><br></pre></td></tr></table></figure><h3 id="namespace-批量导入"><a href="#namespace-批量导入" class="headerlink" title="namespace 批量导入"></a>namespace 批量导入</h3><p>PHP7之前导入方式：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">Space</span>\<span class="title">ClassA</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Space</span>\<span class="title">ClassB</span>;</span><br></pre></td></tr></table></figure><p>PHP7之后导入</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">Space</span>\&#123;<span class="title">ClassA</span>,<span class="title">ClassB</span>&#125;;</span><br></pre></td></tr></table></figure><h3 id="throwable接口"><a href="#throwable接口" class="headerlink" title="throwable接口"></a>throwable接口</h3><p>PHP7之前代码中有语法错误，或者fatal error，程序会直接报错。PHP7中做了改变，<br>PHP7实现了全局throwable接口，原来的Exception和Error实现了该接口，可以被try/catch块捕获。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">undefindfunc();</span><br><span class="line">&#125;<span class="keyword">catch</span> (<span class="built_in">Error</span> <span class="variable">$e</span>)&#123;</span><br><span class="line">var_dump(<span class="variable">$e</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//或者</span></span><br><span class="line"></span><br><span class="line">set_exception_handler(<span class="function"><span class="keyword">function</span> (<span class="params"><span class="variable">$e</span></span>)</span>&#123;</span><br><span class="line">var_dump(<span class="variable">$e</span>);</span><br><span class="line">&#125;);</span><br><span class="line">undefindfunc();</span><br></pre></td></tr></table></figure><h3 id="Closure-call"><a href="#Closure-call" class="headerlink" title="Closure::call()"></a>Closure::call()</h3><p>PHP7之前，需要动态的给一个对象添加方法时，可以通过Closure来复制一个闭包对象，并绑定到一个$this对象和类作用域</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$num</span> = <span class="number">1</span>;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$f</span> = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;num + <span class="number">1</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable">$test</span> = <span class="variable">$f</span>-&gt;bindTo(<span class="keyword">new</span> Test,<span class="string">&#x27;Test&#x27;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$test</span>();</span><br></pre></td></tr></table></figure><p>PHP7中新添加了Closure::call()，可以通过call来暂时绑定一个闭包对象到$this对象，并调用它</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$num</span> = <span class="number">1</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="variable">$f</span> = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;num + <span class="number">1</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$f</span>-&gt;call(<span class="keyword">new</span> Test);</span><br></pre></td></tr></table></figure><h3 id="intdiv函数"><a href="#intdiv函数" class="headerlink" title="intdiv函数"></a>intdiv函数</h3><p>PHP7新增一个整除函数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var_dump(intdiv(<span class="number">10</span>,<span class="number">3</span>));</span><br></pre></td></tr></table></figure><h3 id="list的方括号写法"><a href="#list的方括号写法" class="headerlink" title="list的方括号写法"></a>list的方括号写法</h3><p>PHP7之前写法</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$arr</span> = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">list</span>(<span class="variable">$a</span>,<span class="variable">$b</span>,<span class="variable">$c</span>) = <span class="variable">$arr</span>; </span><br></pre></td></tr></table></figure><p>PHP7优化之后</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$arr</span> = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">[<span class="variable">$a</span>,<span class="variable">$b</span>,<span class="variable">$c</span>] = <span class="variable">$arr</span>;</span><br></pre></td></tr></table></figure><p><font color='red'>注意：这里的[]不是数组的意思，知识list的简略形式</font></p><h3 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h3><p>PHP7除了以上特性外，还有一些其它的，例如：foreach遍历数组时不在修改内部指针、移除了ASP和<br>script PHP标签，移除了$HTTP_RAW_POST_DATA、匿名类、类常量可见性等。</p>]]></content>
      
      
      <categories>
          
          <category> PHP7学习 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>next不蒜子配置修改</title>
      <link href="2021/04/23/hexo-next/next-busuanzi/"/>
      <url>2021/04/23/hexo-next/next-busuanzi/</url>
      
        <content type="html"><![CDATA[<h2 id="next配置不蒜子统计访问量不生效"><a href="#next配置不蒜子统计访问量不生效" class="headerlink" title="next配置不蒜子统计访问量不生效"></a>next配置不蒜子统计访问量不生效</h2><ul><li>不生效原因，由于<a href="http://busuanzi.ibruce.info/">不蒜子</a>修改域名，next用的还是以前的域名，导致统计引入js脚本报错<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script async src=<span class="string">&quot;https://dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li>修改后引入脚本<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script async src=<span class="string">&quot;//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> next配置 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="2021/04/21/hello-world/"/>
      <url>2021/04/21/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
